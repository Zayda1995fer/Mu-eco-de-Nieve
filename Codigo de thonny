import time
from machine import Pin, PWM, I2C, ADC
from time import sleep
from ssd1306 import SSD1306_I2C

# Pines
LIGHT_SENSOR_PIN = ADC(Pin(32))  # Pin para el sensor de luz (ADC)
LED_PIN = PWM(Pin(19))           # Primer LED como PWM para sincronía
LED_PIN_2 = PWM(Pin(13))         # Segundo LED como PWM para sincronía
PIR_PIN = Pin(4, Pin.IN)         # Pin para el sensor PIR (HCSR501)
SERVO_PIN = Pin(15)              # Pin para el servo
BUTTON_ON_PIN = Pin(5, Pin.IN, Pin.PULL_UP)  # Pin para el botón de encendido
BUTTON_OFF_PIN = Pin(14, Pin.IN, Pin.PULL_UP)  # Pin para el botón de apagado
BUZZER_PIN = Pin(16, Pin.OUT)    # Pin para el buzzer

# Configuración de LEDs PWM
LED_PIN.freq(1000)
LED_PIN_2.freq(1000)

# Inicialización del servo
servo = PWM(SERVO_PIN, freq=50)

# Inicialización del OLED
try:
    i2c = I2C(0, scl=Pin(22), sda=Pin(21))
    oled = SSD1306_I2C(128, 64, i2c)
    devices = i2c.scan()
    if devices:
        print("Dispositivos I2C encontrados:", devices)
    else:
        print("No se encontraron dispositivos I2C")
except OSError as e:
    print("Error escaneando I2C:", e)

# Estado del sistema
system_on = False
melody_playing = False

# Melodía de "Jingle Bells"
melodia = [5, 5, 5, 5, 5, 5, 5, 2, 5, 9, 5, 2, 5, 5, 5, 5, 5, 5, 5, 2, 5, 9, 5, 2]
duracion = [1, 1, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 1, 1, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1]

# Diccionario de tonos
tones = {
    0: 0,      # Silencio
    2: 262,    # Do
    5: 330,    # Mi
    9: 392,    # Sol
    100: 0     # Silencio largo (fin de frase)
}

# Variables para el debouncing
last_button_off_time = 0
debounce_delay = 200  # 200 ms de retraso para debouncing

def play_melody():
    global melody_playing
    buzzer = PWM(BUZZER_PIN)
    melody_playing = True
    for i in range(len(melodia)):
        # Verificar si la intensidad de luz ha cambiado a baja y detener la melodía
        if not melody_playing:
            buzzer.duty(0)
            buzzer.deinit()
            return
        note = melodia[i]
        duration_ms = duracion[i] * 500
        if tones[note] > 0:
            buzzer.freq(tones[note])
            buzzer.duty(512)
        else:
            buzzer.duty(0)
        time.sleep_ms(int(duration_ms))
    
    buzzer.duty(0)
    buzzer.deinit()
    melody_playing = False

def move_servo(angle):
    duty = int((angle / 180.0) * 102) + 26
    servo.duty(duty)

def read_light_intensity():
    return LIGHT_SENSOR_PIN.read()

def sound_buzzer(duration):
    BUZZER_PIN.on()
    time.sleep(duration)
    BUZZER_PIN.off()

while True:
    # Botón de encendido
    if BUTTON_ON_PIN.value() == 0 and not system_on:
        system_on = True
        print("Sistema encendido")
        oled.fill(0)
        oled.text("Sistema Encendido", 0, 0)
        oled.show()
        time.sleep(1)

    # Botón de apagado (debouncing)
    if BUTTON_OFF_PIN.value() == 0 and system_on:
        current_time = time.ticks_ms()
        if current_time - last_button_off_time > debounce_delay:
            system_on = False
            melody_playing = False  # Detener la melodía de inmediato
            LED_PIN.duty(0)    # Apagar ambos LEDs
            LED_PIN_2.duty(0)  # Apagar ambos LEDs
            print("Sistema apagado")
            oled.fill(0)
            oled.text("Sistema Apagado", 0, 0)
            oled.show()
            last_button_off_time = current_time
            time.sleep(1)

    if system_on:
        # Leer intensidad de luz y mostrarla en OLED
        light_intensity = read_light_intensity()
        print("Intensidad de luz:", light_intensity)  # Mostrar el valor para depuración
        oled.fill(0)
        oled.text("Luz: {}".format(light_intensity), 0, 0)
        oled.show()

        # Ajuste de la condición: Parpadear LEDs si la intensidad de luz es mayor a 600
        if light_intensity > 600:
            for _ in range(5):  # Número de parpadeos
                LED_PIN.duty(512)   # Encender LEDs al 50% de brillo
                LED_PIN_2.duty(512) # Encender LEDs al 50% de brillo
                time.sleep(0.5)  # Esperar medio segundo
                LED_PIN.duty(0)   # Apagar LEDs
                LED_PIN_2.duty(0) # Apagar LEDs
                time.sleep(0.5)  # Esperar medio segundo
            if not melody_playing:
                print("Luz alta detectada, reproduciendo melodía.")
                play_melody()
        else:
            LED_PIN.duty(0)    # Apagar ambos LEDs
            LED_PIN_2.duty(0)  # Apagar ambos LEDs
            if melody_playing:
                print("Luz baja detectada, deteniendo melodía.")
                melody_playing = False
        
        time.sleep(1)

        # Sensor de movimiento PIR
        if PIR_PIN.value() == 1:
            print("Movimiento detectado!")
            oled.fill(0)
            oled.text("Movimiento detectado!", 0, 20)
            oled.show()
            sound_buzzer(1)
            move_servo(90)
            time.sleep(1)
            move_servo(0)

    time.sleep(1)
